		     +--------------------------+
       	       	     |		ECE 434		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

Haoyang Yu <haoyang.yu@rutgers.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Github project account:

https://github.com/haoyangyu/os-pintos

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Argument Parsing:
http://courses.cs.vt.edu/~cs3204/fall2009/pintos-vt-local/Project2Session.pdf
http://en.cppreference.com/w/cpp/types/integer




			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define ARGS_SIZE PGSIZE / 2   							//File_name+Arguments size
#define ARGV_SIZE (PGSIZE - ARGS_SIZE - sizeof (unsigned)) / sizeof (char *)    //Max Argument Count Number
#define WORD_SIZE 4   								//Word size 
#define ARGS_DELI " "								//Arguments separated by “ “
#define BAD_ARGS -1								//Arguments overflow
		
//Form a struct that holds the arguments of ARGUMENTS structure
struct args_struct{
	char args[ARGS_SIZE];
	char *argv[ARGV_SIZE];	
	unsigned argc;
};

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

For argument parsing, we defined a function called argument_tokenize(), in this function 
we used strtok_r() function to parse the arguments, then stored them in the argv[] of args_struct 
self-defined structure from left to right order. During the same time, we counted the argc value, 
which means how many times the loop iterates, then we have how many argc value. 

Then in setup_stack() function, we called our self-defined function called push_args_to_stack(), in 
the function, we parse the argv[] from right to left order. Firstly, we push byte by byte from every 
character from right to left, and then do word align action, and push word by word from NULL to the
pointer which points to the arguments, later the argv address and argc value, last the fake return address, NULL.
All push byte by byte and word by word were done through two functions called, push_byte_to_stack() and 
push_word_to_stack(), in these two functions, we decremented the *esp by sizeof(uint8_t) and sizeof(uint32_t)
through PHYSICAL_BASE of virtual memory.

For avoid overflowing the stack page, the function we defined all return bool type.
1. In push_byte_to_stack() and push_word_to_stack(), during the decrement of the value of *esp, we 
will compare the value of *esp with the USER_STACK_VADDR, which is the lowest address of the user page in stack.
Once *esp is below USER_STACK_VADDR, we will return FALSE back, then the function push_args_to_stack() will 
get FALSE, and also setup_stack() gets FALSE, and finally load() will return false, and also start_process(), 
finally will reach to the thread_exit(). Through the BOOL value, we clearly protect the stack from 
overflowing. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The functions strtok_r() and strtok() both are for parsing a string into
parts of tokens. The difference between strtok_r() and strtok() is that 
strtok_r() is a reentrant version of strtok(), which will have one more arguments, 
which is a save pointer. The saveptr argument is a pointer to a char * variable that 
is used internally by strtok_r() in order to maintain context between successive calls 
that parse the same string. 

Because strtok_r() can maintain context between successsive calls that parse the same 
string, it is good and safe for preemptive thread, that is why Pintos implement strtok_r()
not strtok().
 
>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. Shell can be viewed as another layer that covers on kernel, so this feature naturally 
provide another safety protection, which can be used to detect bad arguments.
2. Shell, not kernel does the task of separation can reduce the workload and complexity of 
kernel, which can improve the system performance. 

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Any other comments?
